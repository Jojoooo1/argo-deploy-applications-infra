apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: apisix
  namespace: argocd

  # By default, deleting an application will not perform a cascade delete, thereby deleting its resources.
  # You must add the finalizer if you want this behaviour
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default

  syncPolicy:
    syncOptions:
      # allows skipping syncing resources that are already in the desired state
      - ApplyOutOfSyncOnly=true
      # allows using background deletion during syncing
      - PrunePropagationPolicy=background
        # Create namespace at application creation
      - CreateNamespace=true

  source:
    chart: apisix
    repoURL: registry-1.docker.io/bitnamicharts
    targetRevision: 2.1.1
    
    # https://github.com/bitnami/charts/tree/main/bitnami/apisix
    helm:
      valuesObject:
        # We use traditional mode. #https://github.com/bitnami/charts/tree/main/bitnami/apisix#deployment-modes
        dataPlane:
          enabled: false

        controlPlane:
          replicaCount: 1
          extraConfig:
            deployment:
              role: traditional
              role_traditional:
                config_provider: etcd
          service:
            type: ClusterIP
            extraPorts:
              - name: http
                port: 80
                targetPort: 9080
              - name: https
                port: 443
                targetPort: 9443
          # resources:
          #   requests:
          #     memory: "2.5Gi"
          #     cpu: "1"
          #   limits:
          #     memory: "2.5Gi"
          #     cpu: "1"

        ingressController:
          replicaCount: 1
          # resources:
          #   requests:
          #     memory: "2.5Gi"
          #     cpu: "1"
          #   limits:
          #     memory: "2.5Gi"
          #     cpu: "1"

        dashboard:
          replicaCount: 1
          username: admin
          password: password
          service:
            type: ClusterIP
          ingress:
            enabled: true
            hostname: apisix.local.com.br
            ingressClassName: nginx

          # resources:
          #   requests:
          #     memory: "2.5Gi"
          #     cpu: "1"
          #   limits:
          #     memory: "2.5Gi"
          #     cpu: "1"

  destination:
    server: https://kubernetes.default.svc
    namespace: apisix
