apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: infra-ingress-nginx-helm
  namespace: argocd

  # Add this finalizer ONLY if you want these to cascade delete (A cascade delete, deletes both the app and its resources, rather than only the app.)
  # finalizers:
  #   - resources-finalizer.argocd.argoproj.io

spec:
  project: default
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - ServerSideApply=true
    automated:
      prune: true
      selfHeal: true

  source:
    chart: ingress-nginx
    repoURL: "https://kubernetes.github.io/ingress-nginx"
    targetRevision: 4.11.0

    # https://github.com/kubernetes/ingress-nginx/tree/main/charts/ingress-nginx
    helm:
      valuesObject:
        fullnameOverride: ingress-nginx
        controller:
          allowSnippetAnnotations: true
          # service:
            # do not work locally
            # externalTrafficPolicy: Local # Used to allow whitelist by IP

          ## Resources ##
          resources:
            requests:
              cpu: 300m
              memory: 400Mi
            limits:
              # cpu: without limit
              memory: 400Mi

          ## Replica ##
          autoscaling:
            enabled: false # true
            minReplicas: 1
            maxReplicas: 5
            targetCPUUtilizationPercentage: 80
            targetMemoryUtilizationPercentage: 80
          
          ## Monitoring ##
          metrics:
            enabled: true

            serviceMonitor:
              enabled: false # true
              namespace: ingress-nginx
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack
              namespaceSelector:
                matchNames: 
                - ingress-nginx
        
            prometheusRule:
              enabled: false # true
              namespace: ingress-nginx
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack
              rules: 
                - alert: NginxHighHttp5xxErrorRate
                  expr: sum by(ingress, exported_service) (rate(nginx_ingress_controller_requests{status=~"^5.."}[5m])) / sum by(ingress, exported_service) (rate(nginx_ingress_controller_requests[5m])) * 100 > 5
                  for: 1m
                  labels:
                    severity: critical
                  annotations:
                    summary: "Nginx high HTTP 5xx error rate"
                    description: "Too many HTTP requests with status 5xx (> 5%) for ingress '{{ $labels.ingress }}'"

                - alert: NginxLatencyHigh
                  expr: histogram_quantile(0.99, sum(rate(nginx_ingress_controller_request_duration_seconds_bucket[2m])) by (host, instance)) > 3
                  for: 2m
                  labels:
                    severity: warning
                  annotations:
                    summary: "Nginx latency high"
                    description: "Nginx p99 latency is higher than 3 seconds"
 
          extraEnvs:
            - name: TZ
              value: America/Sao_Paulo
          config:
            # https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/log-format/
            log-format-escape-json: "true"
            log-format-upstream: '{"@timestamp":"$time_iso8601","request_id":"$req_id","service_name":"$service_name","status":"$status","duration":"$request_time","method":"$request_method","host":"$host","path":"$uri","request_query":"$args","request_length":"$request_length","bytes_sent":"$bytes_sent","http_version":"$server_protocol","http_referrer":"$http_referer","http_user_agent":"$http_user_agent","remote_addr":"$proxy_protocol_addr","remote_user":"$remote_user","x_forwarded_for":"$proxy_add_x_forwarded_for"}'    

            # # Enable Modsecurity and the OWASP Core rule set
            # enable-modsecurity: "true"
            # # Update ModSecurity config and rules
            # modsecurity-snippet: |
            #   # this enables the mod security nextcloud plugin
            #   Include /etc/nginx/owasp-modsecurity-crs/plugins/nextcloud-rule-exclusions-before.conf

            #   # this enables the default OWASP Core Rule Set
            #   Include /etc/nginx/owasp-modsecurity-crs/nginx-modsecurity.conf

            #   # Enable prevention mode. Options: DetectionOnly,On,Off (default is DetectionOnly)
            #   SecRuleEngine On

            #   # Enable scanning of the request body
            #   SecRequestBodyAccess On

            #   # Enable XML and JSON parsing
            #   SecRule REQUEST_HEADERS:Content-Type "(?:text|application(?:/soap\+|/)|application/xml)/" \
            #     "id:200000,phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"

            #   SecRule REQUEST_HEADERS:Content-Type "application/json" \
            #     "id:200001,phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"

            #   # Reject if larger (we could also let it pass with ProcessPartial)
            #   SecRequestBodyLimitAction Reject

            #   # Send ModSecurity audit logs to the stdout (only for rejected requests)
            #   SecAuditLog /dev/stdout

            #   # format the logs in JSON
            #   SecAuditLogFormat JSON

            #   # could be On/Off/RelevantOnly
            #   SecAuditEngine RelevantOnly

            # extraVolumes:
            #   - name: plugins
            #     configMap:
            #       name: modsecurity-plugins

            # # override the /etc/nginx/enable-owasp-modsecurity-crs/plugins with the ConfigMap
            # extraVolumeMounts:
            #   - name: plugins
            #     mountPath: /etc/nginx/owasp-modsecurity-crs/plugins

  destination:
    server: "https://kubernetes.default.svc"
    namespace: ingress-nginx

  ignoreDifferences:
    - kind: Service
      name: ingress-nginx-controller
      namespace: ingress-nginx
      jsonPointers:
        - /spec/ipFamilies
        - /spec/ipFamilyPolicy
        
    # https://github.com/argoproj/argo-cd/issues/1079
    - group: autoscaling
      kind: HorizontalPodAutoscaler
      jqPathExpressions:
        - .spec.metrics[].resource.name | select((. == "cpu") or (. == "memory"))

    - kind: Service
      jqPathExpressions:
        - .status.loadBalancer.ingress[].ipMode