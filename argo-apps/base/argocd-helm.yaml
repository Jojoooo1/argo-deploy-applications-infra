apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: infra-argocd-helm
  namespace: argocd

  # Add this finalizer ONLY if you want these to cascade delete (A cascade delete, deletes both the app and its resources, rather than only the app.)
  # finalizers:
  #   - resources-finalizer.argocd.argoproj.io

spec:
  project: default
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground

    # automated:
    #   prune: true
    #   selfHeal: true
      
  sources:
      # Do not use official repo has argo do not allow (yet) kustomize patch inside Application # https://github.com/argoproj/argo-cd/issues/16352
    - repoURL: https://github.com/Jojoooo1/argocd-extensions-metrics
      targetRevision: main
      path: ./

    - chart: argo-cd
      repoURL: https://argoproj.github.io/argo-helm
      targetRevision: 7.1.5

      # https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd
      helm:
        valuesObject:
          fullnameOverride: argocd
          crds:
            install: true
            annotations:
              argocd.argoproj.io/sync-wave: "-1"
          global:
            image: 
              tag: v2.12.0-rc1
            domain: argo${ARGOCD_ENV_DNS_ENV}.${ARGOCD_ENV_DNS_DOMAIN}
            logging: 
              format: json

          applicationSet:
            enabled: false
          notifications:
            enabled: false
          configs:
            secret:
              createSecret: false
            cm:
              url: http://argo${ARGOCD_ENV_DNS_ENV}.${ARGOCD_ENV_DNS_DOMAIN}
              exec.enabled: "true"
              kustomize.buildOptions: "--load-restrictor LoadRestrictionsNone"

              # DO NOT USE in production, this is only used to improve reconciliation in testing env.
              timeout.reconciliation: "10s"

              # dex.config: |
              #   connectors:
              #     - id: google
              #       name: Google
              #       type: oidc
              #       config:
              #         issuer: https://accounts.google.com
              #         clientID: $dex.client.id # read from argo-secrets
              #         clientSecret: $dex.client.secret # read from argo-secrets
              extension.config: |-
                extensions:
                  - name: metrics
                    backend:
                      services:
                      - url: http://argocd-metrics-server.argocd.svc.cluster.local:9003

            params:
              server.insecure: true
              # Mandatory for extensions to work
              server.enable.proxy.extension: "true"
            rbac:
              policy.default: role:readonly
              policy.csv: |-
                p, role:readonly, extensions, invoke, metrics, allow
                p, role:admin, extensions, invoke, metrics, allow
            cmp:
              create: true
              plugins:
                envsubst:
                  init:
                    command: ["sh", "-c"]
                    args: ["kustomize build . --load-restrictor LoadRestrictionsNone -o raw-kustomization.yaml"]                   
                  generate:
                    command: ["sh", "-c"]
                    args: ["envsubst < raw-kustomization.yaml > processed-kustomization.yaml && cp processed-kustomization.yaml /dev/stdout"]
                  discover:
                    fileName: "kustomization.*"

          ## Controller ##
          controller:
            # resources:
            #   limits:
            #     cpu: 1
            #     memory: 1024Mi
            #   requests:
            #     cpu: 500m
            #     memory: 1024Mi
            metrics:
              enabled: true
              serviceMonitor:
                enabled: true
                namespace: argocd
                additionalLabels:
                  prometheus.io/scrap-with: kube-prometheus-stack
        
          ## DEX ##
          dex:
            enabled: true
            metrics:
              enabled: true
              serviceMonitor:
                enabled: false # enable for production
                namespace: argocd
                additionalLabels:
                  prometheus.io/scrap-with: kube-prometheus-stack

          ## RepoServer ##
          repoServer:
            # resources:
            #   limits:
            #     cpu: 500m
            #     memory: 1.5Gi
            #   requests:
            #     cpu: 250m
            #     memory: 512Mi

            volumes:
              - name: custom-tools
                emptyDir: {}
              - name: cmp-plugin
                configMap:
                  name: argocd-cmp-cm

            initContainers:
              - name: download-tools
                image: golang:1.21.6-alpine
                command: [sh, -c]
                args:
                  - apk add git && go install github.com/drone/envsubst/cmd/envsubst@v1.0.3 && mv $GOPATH/bin/envsubst /custom-tools/
                volumeMounts:
                  - mountPath: /custom-tools
                    name: custom-tools

            extraContainers:        
              - name: envsubst
                command: [/var/run/argocd/argocd-cmp-server]
                image: quay.io/argoproj/argocd:v2.10.2
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 999
                volumeMounts:
                  - mountPath: /var/run/argocd
                    name: var-files
                  - mountPath: /home/argocd/cmp-server/plugins
                    name: plugins
                  - mountPath: /tmp
                    name: tmp

                  # Register plugins into sidecar
                  - mountPath: /home/argocd/cmp-server/config/plugin.yaml
                    subPath: envsubst.yaml
                    name: cmp-plugin

                  # Important: Mount tools into $PATH
                  - name: custom-tools
                    subPath: envsubst
                    mountPath: /usr/local/bin/envsubst

            metrics:
              enabled: true
              serviceMonitor:
                enabled: true
                namespace: argocd
                additionalLabels:
                  prometheus.io/scrap-with: kube-prometheus-stack

          ## Server ##
          server:
            # resources:
            #   limits:
            #     cpu: 400m
            #     memory: 512Mi
            #   requests:
            #     cpu: 400m
            #     memory: 512Mi
            metrics:
              enabled: true
              serviceMonitor:
                enabled: true
                additionalLabels:
                  prometheus.io/scrap-with: kube-prometheus-stack
                namespace: argocd
            ingress:
              enabled: true
              ingressClassName: "nginx"

            extensions:
              enabled: true
              extensionList:
                - name: metrics
                  env:
                    - name: EXTENSION_URL
                      value: https://github.com/argoproj-labs/argocd-extension-metrics/releases/download/v1.0.1/extension.tar.gz
                    - name: EXTENSION_CHECKSUM_URL
                      value: https://github.com/argoproj-labs/argocd-extension-metrics/releases/download/v1.0.1/extension_checksums.txt
                - name: rollout
                  env:
                    - name: EXTENSION_URL
                      value: https://github.com/argoproj-labs/rollout-extension/releases/download/v0.3.4/extension.tar
                   
              resources: {}
                # limits:
                #   cpu: 50m
                #   memory: 128Mi
                # requests:
                #   cpu: 10m
                #   memory: 64Mi

          ## Redis ##
          redis:
            resources:
              limits:
                cpu: 120m
                memory: 256Mi
              requests:
                cpu: 120m
                memory: 256Mi
            metrics:
              enabled: true
              serviceMonitor:
                enabled: true
                additionalLabels:
                  prometheus.io/scrap-with: kube-prometheus-stack
                namespace: argocd

  destination:
    server: "https://kubernetes.default.svc"
    namespace: argocd